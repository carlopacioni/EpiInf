<!--
  ~ Copyright (C) 2015 Tim Vaughan <tgvaughan@gmail.com>
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<beast version="2.0" namespace="
    beast.app.beauti
    :beast.core
    :beast.core.parameter
    :epiinf
    :epiinf.models
    :epiinf.distribs">

    <mergewith point="treePriorTemplates">

        <subtemplate id="EpidemicTreePrior" class="epiinf.distribs.SMCTreeDensity" mainid="EpiTreePrior.t:$(n)"
                     suppressInputs="epiinf.distribs.SMCTreeDensity.tree,
                     epiinf.distribs.SMCTreeDensity.treeIntervals,
                     epiinf.models.SISModel.tolerance"
                     inlineInputs="epiinf.distribs.SMCTreeDensity.model">
            <![CDATA[
            <distribution id="EpiTreePrior.t:$(n)" spec="epiinf.distribs.SMCTreeDensity" nParticles="100">
                <tree idref="Tree.t:$(n)"/>
                <treeOrigin id="origin.t:$(n)" spec="beast.core.parameter.RealParameter" value="10.0" estimate="true"/>
                <model spec="epiinf.models.SISModel">
                    <S0 id="S0.t:$(n)" spec="beast.core.parameter.IntegerParameter" value="199" lower="0" estimate="true"/>
                    <infectionRate id="infectionRate.t:$(n)" spec="beast.core.parameter.RealParameter" lower="0" value="0.01" estimate="true"/>
                    <recoveryRate id="recoveryRate.t:$(n)" spec="beast.core.parameter.RealParameter" lower="0" value="0.01" estimate="true"/>
                    <psiSamplingRate id="psiSamplingRate.t:$(n)" spec="beast.core.parameter.RealParameter" lower="0" value="0.0" estimate="true"/>
                </model>
            </distribution>

            <distribution id="originPrior.t:$(n)" spec="beast.math.distributions.Prior">
                <x idref="origin.t:$(n)"/>
                <distr spec="beast.math.distributions.OneOnX"/>
            </distribution>
            <distribution id="S0Prior.t:$(n)" spec="beast.math.distributions.Prior">
                <x idref="S0.t:$(n)"/>
                <distr spec="beast.math.distributions.Poisson">
                    <lambda spec="beast.core.parameter.RealParameter" value="100"/>
                </distr>
            </distribution>
            <distribution id="infectionRatePrior.t:$(n)" spec="beast.math.distributions.Prior">
                <x idref="infectionRate.t:$(n)"/>
                <distr spec="beast.math.distributions.OneOnX"/>
            </distribution>
            <distribution id="recoveryRatePrior.t:$(n)" spec="beast.math.distributions.Prior">
                <x idref="recoveryRate.t:$(n)"/>
                <distr spec="beast.math.distributions.OneOnX"/>
            </distribution>
            <distribution id="psiSamplingRatePrior.t:$(n)" spec="beast.math.distributions.Prior">
                <x idref="psiSamplingRate.t:$(n)"/>
                <distr spec="beast.math.distributions.OneOnX"/>
            </distribution>

            <operator id='originScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8" parameter="@origin.t:$(n)" weight="1"/>
            <operator id='S0Walker.t:$(n)' spec='IntRandomWalkOperator' windowSize="10" parameter="@S0.t:$(n)" weight="1"/>
            <operator id='infectionRateScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8" parameter="@infectionRate.t:$(n)" weight="1"/>
            <operator id='recoveryRateScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8" parameter="@recoveryRate.t:$(n)" weight="1"/>
            <operator id='psiSamplingRateScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8" parameter="@psiSamplingRate.t:$(n)" weight="1"/>
            ]]>

            <connect srcID="EpiTreePrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inlikelihood(Tree.t:$(n))"/>

            <connect srcID="origin.t:$(n)" targetID="state" inputName="stateNode"
                     if="inlikelihood(Tree.t:$(n)) and origin.t:$(n)/estimate=true"/>
            <connect srcID="originPrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inlikelihood(Tree.t:$(n)) and origin.t:$(n)/estimate=true"/>
            <connect srcID="originScaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inlikelihood(Tree.t:$(n)) and origin.t:$(n)/estimate=true"/>

            <connect srcID="S0.t:$(n)" targetID="state" inputName="stateNode"
                     if="inlikelihood(Tree.t:$(n)) and S0.t:$(n)/estimate=true"/>
            <connect srcID="S0Prior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inlikelihood(Tree.t:$(n)) and S0.t:$(n)/estimate=true"/>
            <connect srcID="S0Walker.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inlikelihood(Tree.t:$(n)) and S0.t:$(n)/estimate=true"/>

            <connect srcID="infectionRate.t:$(n)" targetID="state" inputName="stateNode"
                     if="inlikelihood(Tree.t:$(n)) and infectionRate.t:$(n)/estimate=true"/>
            <connect srcID="infectionRatePrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inlikelihood(Tree.t:$(n)) and infectionRate.t:$(n)/estimate=true"/>
            <connect srcID="infectionRateScaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inlikelihood(Tree.t:$(n)) and infectionRate.t:$(n)/estimate=true"/>

            <connect srcID="recoveryRate.t:$(n)" targetID="state" inputName="stateNode"
                     if="inlikelihood(Tree.t:$(n)) and recoveryRate.t:$(n)/estimate=true"/>
            <connect srcID="recoveryRatePrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inlikelihood(Tree.t:$(n)) and recoveryRate.t:$(n)/estimate=true"/>
            <connect srcID="recoveryRateScaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inlikelihood(Tree.t:$(n)) and recoveryRate.t:$(n)/estimate=true"/>

            <connect srcID="psiSamplingRate.t:$(n)" targetID="state" inputName="stateNode"
                     if="inlikelihood(Tree.t:$(n)) and psiSamplingRate.t:$(n)/estimate=true"/>
            <connect srcID="psiSamplingRatePrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inlikelihood(Tree.t:$(n)) and psiSamplingRate.t:$(n)/estimate=true"/>
            <connect srcID="psiSamplingRateScaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inlikelihood(Tree.t:$(n)) and psiSamplingRate.t:$(n)/estimate=true"/>
        </subtemplate>


    </mergewith>

</beast>
