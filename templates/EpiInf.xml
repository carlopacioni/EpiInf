<!--
  ~ Copyright (C) 2015 Tim Vaughan <tgvaughan@gmail.com>
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<beast version="2.0" namespace="
    beast.app.beauti
    :beast.core
    :beast.core.parameter
    :epiinf
    :epiinf.models
    :epiinf.distribs">


    <mergewith point='misc'>
        <fragment id='EpiModelParameter' spec="beast.app.beauti.Fragment">
            <![CDATA[
            <operator id='$(p)Scaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8" parameter="@$(p).t:$(n)" weight="1"/>
            <distribution id="$(p)Prior.t:$(n)" spec="beast.math.distributions.Prior">
                <x idref="$(p).t:$(n)"/>
                <distr spec="beast.math.distributions.OneOnX"/>
            </distribution>
            <distribution id="$(p)ChangeTimesPrior.t:$(n)" spec="epiinf.util.ExponentialChangeTimesPrior">
                <changeTimes idref="$(p)ChangeTimes.t:$(n)"/>
                <meanIntervalLength spec="beast.core.parameter.RealParameter" value="1.0" id="$(p)ChangeInterval.t:$(n)" estimate="false"/>
            </distribution>
            <distribution id="$(p)ChangeIntervalPrior.t:$(n)" spec="beast.math.distributions.Prior">
                <x idref="$(p)ChangeInterval.t:$(n)"/>
                <distr spec="beast.math.distributions.OneOnX"/>
            </distribution>
            <operator id='$(p)ChangeTimesScaler.t:$(n)' spec='epiinf.util.ChangeTimesOperator' scaleFactor="0.8" weight="1">
                <changeTimes id="$(p)ChangeTimes.t:$(n)" spec="beast.core.parameter.RealParameter" value="0.0" estimate="false"/>
            </operator>
            <operator id="$(p)ChangeIntervalScaler.t:$(n)" spec="ScaleOperator" scaleFactor="0.8" parameter="@$(p)ChangeInterval.t:$(n)" weight="1"/>
            ]]>

            <connect srcID="$(p).t:$(n)" targetID="state" inputName="stateNode"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p).t:$(n)/estimate=true"/>
            <connect srcID="$(p)Prior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p).t:$(n)/estimate=true"/>
            <connect srcID="$(p)Scaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p).t:$(n)/estimate=true"/>
            <connect srcID="$(p).t:$(n)" targetID="tracelog" inputName="log"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p).t:$(n)/estimate=true"/>
            <connect srcID="$(p).t:$(n)" targetID="screenlog" inputName="log"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p).t:$(n)/estimate=true"/>

            <connect srcID="$(p)ChangeTimes.t:$(n)" targetID="state" inputName="stateNode"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeTimes.t:$(n)/estimate=true"/>
            <connect srcID="$(p)ChangeTimesScaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeTimes.t:$(n)/estimate=true"/>
            <connect srcID="$(p)ChangeTimesPrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeTimes.t:$(n)/estimate=true"/>
            <connect srcID="$(p)ChangeTimes.t:$(n)" targetID="tracelog" inputName="log"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeTimes.t:$(n)/estimate=true"/>
            <connect srcID="$(p)ChangeTimes.t:$(n)" targetID="screenlog" inputName="log"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeTimes.t:$(n)/estimate=true"/>


            <connect srcID="$(p)ChangeInterval.t:$(n)" targetID="state" inputName="stateNode"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeInterval.t:$(n)/estimate=true"/>
            <connect srcID="$(p)ChangeIntervalScaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeInterval.t:$(n)/estimate=true"/>
            <connect srcID="$(p)ChangeIntervalPrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeInterval.t:$(n)/estimate=true"/>
            <connect srcID="$(p)ChangeInterval.t:$(n)" targetID="tracelog" inputName="log"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeInterval.t:$(n)/estimate=true"/>
            <connect srcID="$(p)ChangeInterval.t:$(n)" targetID="screenlog" inputName="log"
                     if="inposterior(EpiTreePrior.t:$(n)) and $(p)ChangeInterval.t:$(n)/estimate=true"/>
        </fragment>
    </mergewith>

    <mergewith point="treePriorTemplates">

        <subtemplate id="EpiTreePrior" class="epiinf.distribs.SMCTreeDensity" mainid="EpiTreePrior.t:$(n)"
                     suppressInputs="epiinf.distribs.SMCTreeDensity.tree,
                     epiinf.distribs.SMCTreeDensity.treeIntervals,
                     epiinf.models.SISModel.tolerance"
                     inlineInputs="epiinf.distribs.SMCTreeDensity.model">
            <![CDATA[
            <distribution id="EpiTreePrior.t:$(n)" spec="epiinf.distribs.SMCTreeDensity" nParticles="100">
                <tree idref="Tree.t:$(n)"/>
                <treeOrigin id="epiOrigin.t:$(n)" spec="beast.core.parameter.RealParameter" value="10.0" estimate="true"/>
                <model id="model.t:$(n)" spec="epiinf.models.SISModel" rhoSamplingTime="@epiOrigin.t:$(n)">
                    <S0 id="S0.t:$(n)" spec="beast.core.parameter.IntegerParameter" value="199" lower="0" estimate="true"/>
                    <infectionRate id="infectionRate.t:$(n)" spec="beast.core.parameter.RealParameter" lower="0" value="0.01" estimate="true"/>
                    <recoveryRate id="recoveryRate.t:$(n)" spec="beast.core.parameter.RealParameter" lower="0" value="0.1" estimate="true"/>
                    <psiSamplingRate id="psiSamplingRate.t:$(n)" spec="beast.core.parameter.RealParameter" lower="0" value="0.1" estimate="true"/>
                    <rhoSamplingProb id="rhoSamplingProb.t:$(n)" spec="beast.core.parameter.RealParameter" lower="0" value="0.0" estimate="false"/>
                </model>
            </distribution>

            <distribution id="epiOriginPrior.t:$(n)" spec="beast.math.distributions.Prior">
                <x idref="epiOrigin.t:$(n)"/>
                <distr spec="beast.math.distributions.OneOnX"/>
            </distribution>

            <distribution id="S0Prior.t:$(n)" spec="beast.math.distributions.Prior">
                <x idref="S0.t:$(n)"/>
                <distr spec="beast.math.distributions.Poisson">
                    <lambda spec="beast.core.parameter.RealParameter" value="100" estimate="false"/>
                </distr>
            </distribution>

            <distribution id="rhoSamplingProbPrior.t:$(n)" spec="beast.math.distributions.Prior">
                <x idref="rhoSamplingProb.t:$(n)"/>
                <distr spec="beast.math.distributions.Uniform"/>
            </distribution>

            <operator id='epiOriginScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8" parameter="@epiOrigin.t:$(n)" weight="1"/>
            <operator id='S0Walker.t:$(n)' spec='IntRandomWalkOperator' windowSize="10" parameter="@S0.t:$(n)" weight="1"/>
            <operator id='rhoSamplingProbScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8" parameter="@rhoSamplingProb.t:$(n)" weight="1"/>

            ]]>

            <plate fragment="TreeOperators" var="m" range="EpiTreePrior"/>
            <plate fragment="EpiModelParameter" var="p" range="infectionRate"/>
            <plate fragment="EpiModelParameter" var="p" range="recoveryRate"/>
            <plate fragment="EpiModelParameter" var="p" range="psiSamplingRate"/>

            <connect srcID="EpiTreePrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(EpiTreePrior.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true">
                Epidemic tree prior on tree t:$(n)
            </connect>

            <connect srcID="epiOrigin.t:$(n)" targetID="state" inputName="stateNode"
                     if="inposterior(EpiTreePrior.t:$(n)) and epiOrigin.t:$(n)/estimate=true"/>
            <connect srcID="epiOriginPrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(EpiTreePrior.t:$(n)) and epiOrigin.t:$(n)/estimate=true">
                Prior on epidemic origin time.
            </connect>
            <connect srcID="epiOriginScaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior(EpiTreePrior.t:$(n)) and epiOrigin.t:$(n)/estimate=true"/>

            <connect srcID="S0.t:$(n)" targetID="state" inputName="stateNode"
                     if="inposterior(EpiTreePrior.t:$(n)) and S0.t:$(n)/estimate=true"/>
            <connect srcID="S0Prior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(EpiTreePrior.t:$(n)) and S0.t:$(n)/estimate=true">
                Prior on initial susceptible population size.
            </connect>
            <connect srcID="S0Walker.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior(EpiTreePrior.t:$(n)) and S0.t:$(n)/estimate=true"/>

            <connect srcID="rhoSamplingProb.t:$(n)" targetID="state" inputName="stateNode"
                     if="inposterior(EpiTreePrior.t:$(n)) and rhoSamplingProb.t:$(n)/estimate=true"/>
            <connect srcID="rhoSamplingProbPrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(EpiTreePrior.t:$(n)) and rhoSamplingProb.t:$(n)/estimate=true">
                Prior on contemporaneous sampling rate.
            </connect>
            <connect srcID="rhoSamplingProbScaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior(EpiTreePrior.t:$(n)) and rhoSamplingProb.t:$(n)/estimate=true"/>

        </subtemplate>


    </mergewith>

</beast>
